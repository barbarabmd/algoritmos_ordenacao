// 6.Faça um programa que receba valores aleatórios e diferentes em um vetor de inteiros de 6 posições 
// e implemente o heap sort em uma função para ordenar este vetor.


#include <stdio.h> //biblioteca padrão de entrada e saída.
#include <stdlib.h> //biblioteca padrão de funções utilitárias.

//função que cria um heap a partir de um vetor:
void criaHeap(int *vetor, int i, int f){ // 'i'= ídice do elemento principal; 'f' índice final;
    int aux = vetor[i]; //armazena o valor do elemento atual reordenar no final;
    int j = i * 2 + 1; //cálculo do índice do "filho" à esquerda de i;
    while (j <= f){ //enquanto j estiver dentro dos limites...
        if(j < f){ //se houver um "filho" à direita e ele for maior que o "filho" à esquerda...
            if(vetor[j] < vetor[j + 1]){ 
                j = j + 1; //j será apontado para o "filho" à direita, que é maior.
            }
        }
        if(aux < vetor[j]){ //se o "filho" maior for maior que o "pai" (aux) é realizada a troca de posições;
            vetor[i] = vetor[j]; //substituiçãõ do valor do "pai" pelo valor do "filho" maior;
            i = j; //atualiza o 'i' para continuar verificando a subárvore a seguir;
            j = 2 * i + 1; //cálculo do novo "filho" à esquerda;
        }else{ //se o "pai" já for maior que os "filhos", o loop é interrompido;
            j = f + 1; //sai do loop.
        }
    }
    vetor[i] = aux; //coloca o valor original 'aux' na posição correta, reorganizando o heap.
}

//função que implementa o heapSort:
void heapSort(int *vetor, int tam){ //'vet' = vetor a ser ordenado e 'tam' é o tamanho do vetor.
    int i, aux; //variáveis auxiliares;

    //primeiro laço: organiza o vetor original em um heap max;
    for(i = (tam - 1) / 2; i >= 0; i--){ //começa no meio do vetor e vai até o início, criando o heap max;
        criaHeap(vetor, i, tam-1); //chama a função criaHeap para cada "subárvore".
    }

    //segundo laço: pega o maior elemento e reorganiza o heap;
    for (i = tam - 1; i >= 1; i--){
        aux = vetor[0]; //armazenamento do maior elemento;
        vetor[0] = vetor[i]; //coloca o último elemento do vetor na posição da raiz;
        vetor[i] = aux; //coloca o maior elemento na sua posição final;
        criaHeap(vetor, 0, i - 1); //reorganiza o heap para manter a estrutura de heap max.
    }
}

int main() { //início da função main (a principal);
    int i; //variável contador;
    int vetor[6]; //declaração de um vetor de inteiros com 6 posições;

    //print de mensagem pedindo ao usuário que insira 6 valores
    printf("insira 6 valores inteiros, aleatorios e diferentes:\n");

    //laço para capturar os 6 valores do usuário:
    for (i = 0; i < 6; i++) { //laço for que será executado 6 vezes (de 0 até 5) para preencher o vetor com os valores;
        printf("Valor %d: ", i + 1); //mensagem pedindo o valor de cada posição do vetor;
        scanf("%d", &vetor[i]); //lê o número dado pelo usuário e armazena-o na posição i do vetor.
    }

    //chama a função heapSort para ordenar os valores do vetor:
    heapSort(vetor, 6);

    //exibição dos valores ordenados:
    printf("\nvalores ordenados:\n"); 
    for (i = 0; i < 6; i++) { //laço for que percorre o vetor ordenado para exibir os valores na tela;
        printf("valor %d: %d\n", i + 1, vetor[i]); //exibição posição do vetor (i + 1) e posição i no vetor.
    }

    return 0; //fim da função main, retornando o valor 0. programa executado com sucesso!
}


